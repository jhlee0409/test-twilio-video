import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useEffect, useRef } from "react";
import * as Video from "twilio-video";

function participantConnected(participant: any) {
  console.log('Participant "%s" connected', participant.identity);

  const div = document.createElement("div");
  div.id = participant.sid;
  div.innerText = participant.identity;

  participant.on("trackSubscribed", (track: any) =>
    trackSubscribed(div, track)
  );
  participant.on("trackUnsubscribed", trackUnsubscribed);

  participant.tracks.forEach((publication: any) => {
    if (publication.isSubscribed) {
      trackSubscribed(div, publication.track);
    }
  });

  document.body.appendChild(div);
}

function participantDisconnected(participant: any) {
  console.log('Participant "%s" disconnected', participant.identity);
  document.getElementById(participant.sid)!.remove();
}

function trackSubscribed(div: any, track: any) {
  div.appendChild(track.attach());
}

function trackUnsubscribed(track: any) {
  track.detach().forEach((element: any) => element.remove());
}

export default function Home() {
  const userNameRef = useRef<HTMLInputElement>(null);
  const roomNameRef = useRef<HTMLInputElement>(null);
  const connectRoom = async (roomName: string, userName: string) => {
    await fetch("/api/connectRoom", {
      method: "POST",
      body: JSON.stringify({ roomName, userName }),
    })
      .then((res) => res.json())
      .then((res) => {
        console.log(res);
        Video.createLocalTracks({
          audio: false,
          video: { width: 320 },
        })
          .then((localTracks) => {
            return Video.connect(res.token, {
              name: res.name,
              tracks: localTracks,
            });
          })
          .then(
            (room) => {
              console.log(`Connected to Room: ${room.name}`);
              Video.createLocalVideoTrack().then((track) => {
                const localMediaContainer =
                  document.getElementById("local-media");
                localMediaContainer!.appendChild(track.attach());
              });
              room.participants.forEach(participantConnected);
              room.on("participantConnected", (participant) => {
                console.log(`A remote Participant connected: ${participant}`);
                participantConnected(participant);
              });
              room.on("participantDisconnected", participantDisconnected);
              room.once("disconnected", (error) =>
                room.participants.forEach(participantDisconnected)
              );
            },
            (error) => {
              console.error(`Unable to connect to Room: ${error.message}`);
            }
          );
      });
  };
  const handleConnectRoom = () => {
    if (!(userNameRef || roomNameRef)) return;
    const roomName = roomNameRef.current!.value;
    const userName = userNameRef.current!.value;
    connectRoom(roomName, userName);
  };

  useEffect(() => {
    const createRoom = async () => {
      await fetch("/api/createRoom")
        .then((res) => res.json())
        .then((res) => {
          console.log(res);
        });
    };

    // connectRoom();
    // createRoom();
  });
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        roomName: <input type="text" ref={roomNameRef} />
        userName: <input type="text" ref={userNameRef} />
        <button type="button" onClick={handleConnectRoom}>
          connect
        </button>
        <div id="local-media">local</div>
      </div>
    </>
  );
}
