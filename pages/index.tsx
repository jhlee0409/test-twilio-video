import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "../styles/Home.module.css";
import { useEffect } from "react";
import * as Video from "twilio-video";

function participantConnected(participant: any) {
  console.log('Participant "%s" connected', participant.identity);

  const div = document.createElement("div");
  div.id = participant.sid;
  div.innerText = participant.identity;

  participant.on("trackSubscribed", (track: any) =>
    trackSubscribed(div, track)
  );
  participant.on("trackUnsubscribed", trackUnsubscribed);

  participant.tracks.forEach((publication: any) => {
    if (publication.isSubscribed) {
      trackSubscribed(div, publication.track);
    }
  });

  document.body.appendChild(div);
}

function participantDisconnected(participant: any) {
  console.log('Participant "%s" disconnected', participant.identity);
  document.getElementById(participant.sid)!.remove();
}

function trackSubscribed(div: any, track: any) {
  div.appendChild(track.attach());
}

function trackUnsubscribed(track: any) {
  track.detach().forEach((element: any) => element.remove());
}

export default function Home() {
  useEffect(() => {
    const createRoom = async () => {
      await fetch("/api/createRoom")
        .then((res) => res.json())
        .then((res) => {
          console.log(res);
        });
    };
    const generateToken = async () => {
      await fetch("/api/generateToken")
        .then((res) => res.json())
        .then((res) => {
          console.log(res);
          Video.connect(res.token, { name: "DailyStandup" }).then(
            (room) => {
              console.log(`Successfully joined a Room: ${room}`);
              room.on("participantConnected", (participant) => {
                console.log(`A remote Participant connected: ${participant}`);
              });
            },
            (error) => {
              console.error(`Unable to connect to Room: ${error.message}`);
            }
          );
        });
    };
    generateToken();
    // createRoom();
  });
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>start</div>
    </>
  );
}
